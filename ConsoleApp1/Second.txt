 Что такое асинхронное программирование?
    	a) Метод программирования, использующий только синхронные вызовы.
    	b) Метод программирования, позволяющий выполнять асинхронные (не блокирующие) операции.
    	c) Метод программирования, который выполняет все операции параллельно.
@

	Как объявляется асинхронный метод в C#?
    	a) async void MyMethod() { /* code */ }
    	b) void async MyMethod() { /* code */ }
    	c) async Task MyMethod() { /* code */ }

@
	Что такое ключевое слово await?
    	a) Ключевое слово для объявления асинхронного метода.
    	b) Ключевое слово для ожидания завершения асинхронной операции.
    	c) Ключевое слово для указания, что метод должен быть вызван асинхронно.
@

	Какой тип данных возвращает асинхронный метод?
    	a) void
    	b) Task
    	c) async

@
	Как можно организовать последовательность асинхронных операций?
    	a) Используя ключевое слово parallel.
    	b) Используя Task.Result.
    	c) Используя ключевое слово await.
@

	Что такое Task в контексте асинхронного программирования?
    	a) Структура данных для хранения асинхронных операций.
    	b) Класс, представляющий асинхронную операцию и результат её выполнения.
    	c) Тип данных для представления времени выполнения асинхронных методов.
@

	Как обрабатывать исключения в асинхронных методах?
    	a) Используя блок try-catch вокруг всего метода.
    	b) Используя ключевое слово async для обработки исключений.
    	c) Используя блок try-catch вокруг каждой асинхронной операции с await.
@

	Что такое асинхронные события (async events)?
    	a) События, которые происходят асинхронно в разных потоках.
    	b) Это термин не существует в асинхронном программировании.
    	c) События, которые поддерживают асинхронные делегаты и операции.

@
	Как сделать метод асинхронным с возвращаемым значением?
    	a) async Task<int> MyMethod() { /* code */ }
    	b) int async MyMethod() { /* code */ }
    	c) async MyMethod<int>() { /* code */ }

@
	Как использовать Task.Run для выполнения асинхронной операции в отдельном потоке?
    	a) Task.Run(() => MyMethod());
    	b) MyMethod().RunAsync();
    	c) Task.Start(MyMethod());

@
	Как отменить асинхронную операцию?
    	a) Используя Task.Abort().
    	b) Используя CancellationToken.
    	c) Невозможно отменить асинхронную операцию.
@

	Что такое async/await паттерн?
    	a) Паттерн для асинхронной реализации с использованием ключевых слов async/await.
    	b) Паттерн для синхронной реализации с использованием ключевых слов sync/wait.
    	c) Паттерн для ожидания выполнения всех асинхронных операций в приложении.

@
	Как получить результат из асинхронного метода, возвращающего Task<T>?
    	a) Task<T>.Value
    	b) await Task<T>
    	c) await Task<T>.Result


	Как выполнить несколько асинхронных операций параллельно и дождаться их завершения?
    	a) Используя Task.WaitAll().
    	b) Используя async Task.Parallel().
    	c) Используя Task.WhenAll() с await.
@

	Что такое ConfigureAwait и для чего он используется?
    	a) Устанавливает, на каком потоке должно продолжаться выполнение после await.
    	b) Устанавливает конфигурацию асинхронной операции.
    	c) Отключает конфигурацию для асинхронных операций.

@
	Как предотвратить утечки ресурсов при использовании асинхронных операций?
    	a) Очистить все ресурсы в блоке finally.
    	b) Использовать using для управления ресурсами.
    	c) Отключить асинхронность.

@
	Что такое async void?
    	a) Тип возвращаемого значения асинхронного метода.
    	b) Тип, указывающий на отсутствие возвращаемого значения (void) в асинхронном методе.
    	c) Тип асинхронного события.

@
	Как передавать параметры в асинхронный метод?
    	a) Использовать ключевое слово async перед параметрами метода.
    	b) Параметры передаются так же, как и в синхронных методах.
    	c) Использовать Task.Run для передачи параметров.
@

	Как использовать асинхронный конструктор класса?
    	a) Нельзя использовать асинхронные конструкторы.
    	b) Использовать async Task вместо async void.
    	c) Использовать асинхронный конструктор, указав async перед ctor.

@
	Как определить собственный TaskCompletionSource?
    	a) TaskCompletionSource.Create()
    	b) new TaskCompletionSource()
    	c) Task.CompletionSource()
@

	Что такое ConfigureAwait(false) и в каком случае его целесообразно использовать?
    	a) Отключает использование потока из пула для продолжения асинхронной операции.
    	b) Включает использование потока из пула для продолжения асинхронной операции.
    	c) Отключает асинхронность для операции.
@

	Как обрабатывать исключения в асинхронном методе, который возвращает Task<T>?
    	a) Используя try-catch вокруг всего метода.
    	b) Используя try-catch вокруг каждого await.
    	c) Используя catch после await.

@
	Что такое async void метод и когда его следует использовать?
    	a) Метод, который выполняется асинхронно и возвращает void. Следует использовать для событий.
    	b) Метод, который выполняется синхронно и возвращает void. Следует использовать для событий.
    	c) Метод, который выполняется асинхронно и возвращает Task. Следует использовать для событий.
@

	Как отменять асинхронные операции с использованием CancellationToken?
    	a) CancellationToken.CancelAsync()
    	b) CancellationToken.ThrowIfCancellationRequested()
    	c) CancellationTokenSource.Cancel()
@

	Как проверить, завершена ли асинхронная операция?
    	a) Использовать Task.IsCompleted.
    	b) Использовать Task.IsFinished.
    	c) Использовать Task.IsDone.
@

	Как обрабатывать несколько исключений в асинхронной операции?
    	a) Использовать catch (Exception ex).
    	b) Использовать catch (AggregateException ex).
    	c) Использовать catch после каждого await.

@
	Как использовать асинхронный делегат (async delegate)?
    	a) Task.Run(() => { /* code */ })
    	b) async delegate { /* code */ }
    	c) new AsyncDelegate(() => { /* code */ })
@

	Как измерить время выполнения асинхронной операции?
    	a) Использовать DateTime.Now до и после операции.
    	b) Использовать Stopwatch класс.
    	c) Нельзя измерить время выполнения асинхронной операции.
@

	Как прервать выполнение всех асинхронных операций при завершении приложения?
    	a) Использовать Task.WaitAll().
    	b) Использовать Task.WhenAll().
    	c) Использовать CancellationToken с отслеживанием завершения приложения.